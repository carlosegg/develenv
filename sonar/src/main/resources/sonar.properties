# This file must contain only ISO 8859-1 characters
# see http://docs.oracle.com/javase/1.5.0/docs/api/java/util/Properties.html#load(java.io.InputStream)
#
# To use an environment variable, use the following syntax :  ${env:NAME_OF_ENV_VARIABLE}
# For example:
#   sonar.jdbc.url= ${env:SONAR_JDBC_URL}
#
#
# See also the file conf/wrapper.conf for JVM advanced settings


#--------------------------------------------------------------------------------------------------
# WEB SERVER

# Binding IP address. For servers with more than one IP address, this property specifies which
# address will be used for listening on the specified ports.
# By default, ports will be used on all IP addresses associated with the server.
#sonar.web.host=0.0.0.0

# Web context. When set, it must start with forward slash (for example /sonarqube).
# The default value is root context (empty value).
sonar.web.context=/sonar

# TCP port for incoming HTTP connections. Disabled when value is -1.
#sonar.web.port=9000

# TCP port for incoming HTTPS connections. Disabled when value is -1 (default).
#sonar.web.https.port=-1

# HTTPS - the alias used to for the server certificate in the keystore.
# If not specified the first key read in the keystore is used.
#sonar.web.https.keyAlias=

# HTTPS - the password used to access the server certificate from the
# specified keystore file. The default value is "changeit".
#sonar.web.https.keyPass=changeit

# HTTPS - the pathname of the keystore file where is stored the server certificate.
# By default, the pathname is the file ".keystore" in the user home.
# If keystoreType doesn't need a file use empty value.
#sonar.web.https.keystoreFile=

# HTTPS - the password used to access the specified keystore file. The default
# value is the value of sonar.web.https.keyPass.
#sonar.web.https.keystorePass=

# HTTPS - the type of keystore file to be used for the server certificate.
# The default value is JKS (Java KeyStore).
#sonar.web.https.keystoreType=JKS

# HTTPS - the name of the keystore provider to be used for the server certificate.
# If not specified, the list of registered providers is traversed in preference order
# and the first provider that supports the keystore type is used (see sonar.web.https.keystoreType).
#sonar.web.https.keystoreProvider=

# The maximum number of connections that the server will accept and process at any given time.
# When this number has been reached, the server will not accept any more connections until
# the number of connections falls below this value. The operating system may still accept connections
# based on the sonar.web.connections.acceptCount property. The default value is 50 for each
# enabled connector.
#sonar.web.http.maxThreads=50
#sonar.web.https.maxThreads=50

# The minimum number of threads always kept running. The default value is 5 for each
# enabled connector.
#sonar.web.http.minThreads=5
#sonar.web.https.minThreads=5

# The maximum queue length for incoming connection requests when all possible request processing
# threads are in use. Any requests received when the queue is full will be refused.
# The default value is 25 for each enabled connector.
#sonar.web.http.acceptCount=25
#sonar.web.https.acceptCount=25

# Access logs are generated in the file logs/access.log. This file is rolled over when it's 5Mb.
# An archive of 3 files is kept in the same directory.
# Access logs are enabled by default.
#sonar.web.accessLogs.enable=true


#--------------------------------------------------------------------------------------------------
# UPDATE CENTER

# The Update Center requires an internet connection to request http://update.sonarsource.org
# It is enabled by default.
#sonar.updatecenter.activate=true

# HTTP proxy (default none)
#http.proxyHost=
#http.proxyPort=

# NT domain name if NTLM proxy is used
#http.auth.ntlm.domain=

# SOCKS proxy (default none)
#socksProxyHost=
#socksProxyPort=

# proxy authentication. The 2 following properties are used for HTTP and SOCKS proxies.
#http.proxyUser=
#http.proxyPassword=



#--------------------------------------------------------------------------------------------------
# NOTIFICATIONS

# Delay (in seconds) between processing of notification queue
sonar.notifications.delay=60
#--------------------------------------------------------------------------------------------------
# DATABASE


# Comment the 4 following lines to deactivate the default embedded database (used only for tests and demos)
#sonar.jdbc.url:                            jdbc:derby://localhost:1527/sonar;create=true
#sonar.jdbc.driverClassName:                org.apache.derby.jdbc.ClientDriver
#sonar.jdbc.validationQuery:                values(1)
# data directory, autodetected : /data if standalone application, /WEB-INF/classes/data if WAR deployement (exploded mode)
#sonar.embeddedDatabase.dataDir:

# MySql
# uncomment the 3 following lines to use MySQL
sonar.jdbc.url=${sonar.jdbc.url}

# Oracle
# uncomment the 3 following lines to use Oracle
#sonar.jdbc.url:                            jdbc:oracle:thin:@localhost/XE
#sonar.jdbc.driverClassName:                oracle.jdbc.driver.OracleDriver
#sonar.jdbc.validationQuery:                select 1 from dual

# PostgreSQL
# uncomment the 3 following lines to use PostgreSQL
#sonar.jdbc.url:                            jdbc:postgresql://localhost/sonar
#sonar.jdbc.driverClassName:                org.postgresql.Driver
#sonar.jdbc.validationQuery:                select 1

# generic settings
sonar.jdbc.username=sonar
sonar.jdbc.password=${sonar.jdbc.password}
sonar.jdbc.maxActive=10
sonar.jdbc.maxIdle=5
sonar.jdbc.minIdle=2
sonar.jdbc.maxWait=5000
sonar.jdbc.minEvictableIdleTimeMillis=600000
sonar.jdbc.timeBetweenEvictionRunsMillis=30000


# Transaction isolation level. Default driver setting is used by default.
# Values : 1 (TRANSACTION_READ_UNCOMMITED), 2 (TRANSACTION_READ_COMMITTED), 4 (TRANSACTION_REPEATABLE_READ), 8 (TRANSACTION_SERIALIZABLE)
#sonar.jdbc.defaultTransactionIsolation: 2


# When packaged in a WAR, JDBC datasource can be configured into the application server then registered to JNDI.
# In such a case Sonar uses this datasource to connect to database, else if binds itself its own datasource.
# Note : Jonas does not accept to bind subcontexts, so name should be something like 'jdbc-sonar', without slashes.
#sonar.jdbc.jndiName:                       jdbc/sonar


#---------------------------------------------------------
# EXTENSIONS
#---------------------------------------------------------
# Absolute path of coding rules extensions (custom rules that are not provided with tools like Checkstyle or PMD).
# This parameter is useful when Sonar is deployed as a WAR. It avoids from packaging the WAR file each time extensions JARs are updated.
# The directory contains subdirectories like checkstyle/ and pmd/
# Example :
# sonar.rules.extensionsPath:  /user/home/jdoe/sonar/extensions 
#-------------------
# Sonar LDAP Plugin
#-------------------

# IMPORTANT : before activation, make sure that one Sonar administrator is defined in the external system
# Activates the plugin. Leave blank or comment out to use default sonar authentication.
#sonar.authenticator.class: org.sonar.plugins.ldap.LdapAuthenticator
${sonar.authenticator.class}
# Ignore failure at startup if the connection to external system is refused.
# Users can browse sonar but not log in as long as the connection fails.
# When set to true, Sonar will not start if connection to external system fails.
# Default is false.
#sonar.authenticator.ignoreStartupFailure: true

# (omit if you use autodiscovery) URL of the LDAP server.
# If you are using ldaps, then you should install server certificate into java truststore.
# eg. ldap://localhost:10389
# ldap.url: ldap://localhost:10389
${sonar.ldap.url}

# (optional) Distinguished Name (DN) of the root node in LDAP from which to search for users,
# eg. "ou=users,o=mycompany"
#ldap.user.baseDn: ou=users,o=mycompany
${sonar.ldap.baseDN}

# (optional) Bind DN is the username of an LDAP user to connect (or bind) with.
# This is a Distinguished Name of a user who has administrative rights,
# eg. "cn=sonar,ou=users,o=mycompany". Leave blank for anonymous access to the LDAP directory.
#ldap.bindDn:

# (optional) Bind Password is the password of the user to connect with.
# Leave blank for anonymous access to the LDAP directory.
#ldap.bindPassword:

# Login Attribute is the attribute in LDAP holding the user's login.
# Default is 'uid'. Set 'sAMAccountName' for Microsoft Active Directory
#ldap.loginAttribute: sAMAccountName

# Object class of LDAP users.
# Default is 'inetOrgPerson'. Set 'user' for Microsoft Active Directory.
#ldap.userObjectClass: user

# (advanced option) See http://java.sun.com/products/jndi/tutorial/ldap/security/auth.html
# Default is 'simple'. Possible values: 'simple', 'CRAM-MD5', 'DIGEST-MD5', 'GSSAPI'.
#ldap.authentication: DIGEST-MD5

# (advanced option)
# See
# http://java.sun.com/products/jndi/tutorial/ldap/security/digest.html
# http://java.sun.com/products/jndi/tutorial/ldap/security/crammd5.html
# eg. example.org
#ldap.realm:

# (advanced option) Context factory class.
# Default is 'com.sun.jndi.ldap.LdapCtxFactory'.
#ldap.contextFactoryClass: com.sun.jndi.ldap.LdapCtxFactory

# Enable OpenID plugin
${sonar.security.realm}
 
# URL of OpenID provider
${sonar.openid.providerUrl}
 
# URL of logout page
${sonar.openid.providerLogoutUrl}
 
# URL of Sonar server
${sonar.openid.sonarServerUrl}